{"version":3,"sources":["FeetInput.js","lib/FeetToMeter.js","FeetCal.js","Boiler.js","TemInput.js","lib/Convert.js","Calculature.js","App.js","reportWebVitals.js","index.js"],"names":["leanthName","f","m","c","FeetInput","length","typee","handleChange","className","type","name","id","value","onChange","e","toMeter","feet","toFeet","meter","convert","convertTo","input","parseFloat","Number","isNaN","output","Math","round","FeetCal","state","handle","setState","target","this","Component","Boiler","cal","scaleNames","TemInput","scale","tem","onTemChange","toCal","far","toFar","convart","toString","Calculature","onHandleChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e78396b.chunk.js","sourcesContent":["import React from 'react'\r\nconst leanthName = {\r\n    f:\"Feet\",\r\n    m: \"Meter\",\r\n    c:\"cinte Meter\"\r\n}\r\n\r\nexport default function FeetInput({length, typee, handleChange}) {\r\n    return (\r\n        <div>\r\n            <fieldset>\r\n                <legend className=\"legend\">Enter a Value {leanthName[typee]}:</legend>\r\n                <input className=\"input\" type=\"text\" name=\"\" id=\"\" value= {length} onChange= {(e)=>handleChange(e, typee)}  />\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n","export function toMeter(feet) {\r\n    return feet / 3.281\r\n}\r\nexport function toFeet(meter) {\r\n    return meter * 3.281\r\n}\r\nexport function toCinte(cinte) {\r\n    return cinte * 100\r\n}\r\nexport function convert(length, convertTo) {\r\n    const input = parseFloat(length)\r\n    if (Number.isNaN(input)) {\r\n        return \"\"\r\n    }\r\n    const output = convertTo(input)\r\n    const round = Math.round(output*10000)/10000\r\n    return round\r\n}","import React, { Component } from 'react'\r\nimport FeetInput from './FeetInput'\r\nimport { convert, toFeet, toMeter } from './lib/FeetToMeter'\r\nimport CSS from '../src/index.css'\r\n\r\nexport default class FeetCal extends Component {\r\n    state = {\r\n        length: \"\",\r\n        typee: \"f\"\r\n    }\r\n    handle = (e, typee)=>{\r\n        this.setState({\r\n            length: e.target.value,\r\n            typee\r\n        })\r\n    }\r\n\r\n    \r\n    render() {\r\n        const { length, typee } = this.state;\r\n\r\n\r\n        const feet = typee=== \"m\"? convert(length , toFeet): length \r\n        const meter = typee=== \"f\" ? convert(length , toMeter): length \r\n    \r\n        return (\r\n            <div className=\"ok\">\r\n                <FeetInput typee=\"f\" handleChange={this.handle} length={feet} />\r\n                <FeetInput typee=\"m\" handleChange={this.handle} length={meter} />\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Boiler({ cal = 0 }) {\r\n    \r\n        \r\n    if (cal >= 100) {\r\n        return <p>Water Wil Boil</p>\r\n    }\r\n    return <p>Water would not Boil</p>\r\n}","import React from 'react'\r\nconst scaleNames = {\r\n    c:\"Celsius\",\r\n    f:\"Fahrenhit\"\r\n}\r\n\r\nexport default function TemInput({scale, tem, onTemChange}) {\r\n    return (\r\n        <div>\r\n            <fieldset>\r\n                <legend className=\"legend\">Enter a {scaleNames[scale]}</legend>\r\n                <input className=\"input\"  type=\"text\" value={tem}  onChange={(e) => onTemChange(e,scale)} />\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n","export function toCal(far) {\r\n    return ((far - 32) * 5) / 9\r\n    \r\n}\r\nexport function toFar(cal) {\r\n    return (cal * 9) / 5 + 32\r\n \r\n}\r\n\r\nexport function convart(tem, convertTo){\r\n    const input = parseFloat(tem)\r\n    if (Number.isNaN(input)) {\r\n        return \"\"\r\n    }\r\n    const output = convertTo(input)\r\n    const round = Math.round(output)\r\n    return round.toString()\r\n}","import React, { Component } from 'react'\r\nimport Boiler from './Boiler'\r\nimport TemInput from './TemInput'\r\nimport {convart, toCal, toFar} from './lib/Convert'\r\n\r\nexport default class Calculature extends Component {\r\n    state = {\r\n        tem: \"\",\r\n        scale:\"c\"\r\n    }\r\n    onHandleChange = (e, scale) => {\r\n        this.setState({\r\n            \r\n                tem: e.target.value,\r\n                scale\r\n    \r\n        })\r\n    }\r\n    render() {\r\n        const { tem, scale } = this.state;\r\n\r\n        const cal= scale===\"f\" ? convart(tem, toCal):tem\r\n        const far= scale===\"c\" ? convart(tem, toFar):tem\r\n        return (\r\n            <div className=\"ok\">\r\n                <TemInput\r\n                    scale=\"c\"\r\n                    onTemChange={this.onHandleChange}\r\n                    tem={cal}\r\n                \r\n                />\r\n                <TemInput\r\n                    scale=\"f\"\r\n                    onTemChange={this.onHandleChange}\r\n                    tem={far}\r\n                \r\n                \r\n                />\r\n                <Boiler className=\"p\" cal= {parseFloat(cal)} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import FeetCal from \"./FeetCal\"\nimport Calculature from \"./Calculature\"\nexport default function App() {\n  // const quantities = [1, 2, 3];\n    return (\n      <div className=\"main\">\n      <Calculature />\n      <FeetCal />\n        \n      </div>\n    \n      \n    \n    )}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}